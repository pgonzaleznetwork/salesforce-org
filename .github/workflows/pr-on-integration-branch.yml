# Unique name for this workflow
name: Validate PR on integration branch

# Definition when the workflow should run
on:
    pull_request:
      # This workflow will run when a pull request is opened, or when a commit is pushed
      # to a branch that has an existing pull request
      types: [opened, synchronize]
      # We only care about pull requests against (NOT from) the integration branch
      branches: [ integration ]
            

# Jobs to be executed
jobs:
    validate-deployment-on-integration-org:
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            # Install nodejs
            - uses: actions/setup-node@v2
              with:
                node-version: '14'

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2
              with:
                fetch-depth: 0

            # Read the body of the pull request and extract the names of the
            # tests classes that should be run when deploying the changes on this commit
            
            # The tests should be specified in the PR body using the following syntax
            # Apex::[CommunitiesLoginControllerTest,MyProfilePageControllerTest,AnotherTestClass]::Apex
            # This special delimeter can be added to the PR template so that your team doesn't have to remember the syntax
            - name: 'Read PR Body'
              env:
                # The pull request body is available through the github context object
                # we put the body of the pull request in an env variable (only available to this step)
                PAYLOAD: ${{github.event.pull_request.body}}

              # Here we print the content of the environment variable and
              # pipe to a a text file.
              # Then we call the local script parsePR.js, which will create
              # a new file called testsToRun.txt. This file will have the list
              # of tests to run separated by a comman

              # Finally, we add the list of tests to the $GITHUB_ENV variable
              # as this allows us to reference the list in a subsequent step.  If you
              # were using a normal env variable, its value would not be available outside this step.
              run: |
                  echo $PAYLOAD > ./pr_body.txt
                  cat ./pr_body.txt  
                  node ./parsePR.js
                  cat testsToRun.txt
                  TESTS=$(cat testsToRun.txt) 
                  echo $TESTS
                  echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
                  
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

            # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 

            # Install java
            - name: 'Installing java'
              run: sudo apt-get install openjdk-8-jdk

            # Install SFDX scanner
            - name: 'Installing SFDX scanner'
              run: sfdx plugins:install @salesforce/sfdx-scanner

            # Get the Integration Org SFDX URL and store it in a text file
            - name: 'Populate auth file with SFDX_URL secret of integration org'
              shell: bash
              run: |
                  echo ${{ secrets.SFDX_INTEGRATION_URL}} > ./SFDX_INTEGRATION_URL.txt

            # Authenticate to org using the URL stored in the text file
            - name: 'Authenticate to Integration Org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_INTEGRATION_URL.txt -s -a integration

            # We use SFDX Git Delta to create a directory with only the metadata that has changed, this allows us
            # to deploy only those changes, as opposed to deploying the entire branch. This helps reducing deployment times
            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/ 

            # Scan the code in the delta directory by using sfdx scanner. Output the results of the scan in a new file
            # called apexScanResults.csv
            - name: 'Scan code'
              run: |
                  cd changed-sources
                  sfdx scanner:run --format csv --target './**/*.cls' --category "Design,Best Practices,Performance" --outfile 'apexScanResults.csv'  
                  cd ..

            # This action allows us to upload the file created in the previous step to the action UI in Github.
            # This way a tech lead can download the results and determine if any code changes are required
            - name: Upload code scan results
              uses: actions/upload-artifact@v2
              with:
                name: code-scan-report
                path: changed-sources/apexScanResults.csv

            # We do a check-only depploy and we only run the tests specified in the PR
            # If the env variable does not equal 'all', we know that there is a list of
            # tests that can be run
            - name: 'Check-only deploy delta changes - run specified tests'
              if: ${{ env.APEX_TESTS != 'all' }}
              run: |
                  echo ${{env.APEX_TESTS}}
                  sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --json

            # We do a check-only depploy and we run all tests
            - name: 'Check-only deploy delta changes - run all tests'
              if: ${{ env.APEX_TESTS == 'all' }}
              run: |
                  sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunLocalTests  --json

            - name: 'Deploy destructive changes (if any)'
              run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings 

            

           

           